<?php
// $Id: family.module,v 1.15 2010/12/28 00:02:34 jerdiggity Exp $

/**
 * @file
 * Family module - display and manage family tree data
 *
 * Current features:
 * - Individuals saved as nodes
 * - Editing for Individuals records
 * - Groups saved as nodes
 * - Editing for Groups records
 * - Locations saved as nodes
 * - Editing for Locations records
 */

$family_path = drupal_get_path('module', 'family');
  require_once "$family_path/import.inc";
  require_once "$family_path/view.inc";
  require_once "$family_path/family.views.inc";
  require_once "$family_path/family.views_default.inc";
  require_once "$family_path/EstimateDates.inc.php";
  require_once "$family_path/individual.inc";
  require_once "$family_path/location.inc";
//  require_once "$family_path/source.inc";
  require_once "$family_path/group.inc";
  require_once "$family_path/tree.inc";
  require_once "$family_path/common.inc";

/**
 * Implementation of hook_help().
 */
function family_help($path, $arg) {
  switch ($path) {
    case "admin/help#family":
    $famhelp = '<p style="text-align: justify;">';
      $famhelp .= t('The family module is for recording and archiving all aspects of your family\'s history. While it is very extensible, it can also appear somewhat confusing at times, which is why it is highly recommended that you READ THESE INSTRUCTIONS beforehand.');
      $famhelp .= "</p>\n";
      $famhelp .= "<h3>";
      $famhelp .= t('To add a person ("individual") into the system');
      $famhelp .= ":</h3>\n";
    $famhelp .= "<ul>\n<li>";
      $famhelp .= t('Click <em>Create content</em> &rarr; <em>Family: Individual</em> and enter as much information as possible.');
    $famhelp .= "</li>\n</ul>\n";
      $famhelp .= "<h3>";
      $famhelp .= t('To add a marriage, etc ("group") into the system');
      $famhelp .= ":</h3>\n";
    $famhelp .= "<ul>\n<li>";
      $famhelp .= t('Click <em>Create content</em> &rarr; <em>Family: Group</em> and enter as much information as possible.');
      $famhelp .= "</li>\n<li>";
      $famhelp .= t('NOTE: Before a group can be created, the two individuals that the group will be comprised of must have already been created.');
      $famhelp .= "</li></ul>";
      $famhelp .= "<h3>";
      $famhelp .= t('To add a location into the system');
      $famhelp .= ":</h3>\n";
    $famhelp .= "<ul>\n<li>";
      $famhelp .= t('Click <em>Create content</em> &rarr; <em>Family: Location</em> and enter as much information as possible.');
    $famhelp .= "</li>\n</ul>\n";
      return $famhelp;

      break;
    case "node/add#family_individual":
      return '<p>'. t('A record of a single person. Part of the Family module.') .'</p>';
      break;
    case "node/add#family_group":
      return '<p>'. t('A record of a single grouping of parents and their children. Part of the Family module.') .'</p>';
      break;
    case "node/add#family_location":
      return '<p>'. t('A record of a single location, which may be contained in other locations in a hierarchy. Part of the Family module.') .'</p>';
      break;
    }
}

/**
 * Implementation of hook_perm().
 */
function family_perm() {
  return array('access family nodes', 'access family private records', 'create family nodes', 'edit family nodes', 'edit own family nodes', 'administer family');
}

/**
 * Implementation of hook_menu().
 */
function family_menu() {
  $items = array();
  $items['admin/settings/family'] = array(
    'title' => 'Family Tree',
    'access arguments' => array('administer family'),
    'page callback' => 'family_admin_settings',
    'type' => MENU_NORMAL_ITEM,
    );
  $items['admin/settings/family/family_import'] = array(
    'title' => 'Family Import',
    'description' => 'Import your family tree from a standard GED file.',
    'page callback' => 'family_import',
    'access arguments' => array('administer family'),
    'type' => MENU_LOCAL_TASK,
    );
  $items['admin/settings/family/family_import/family_import_done'] = array(
    'title' => 'Family Import',
    'description' => 'Import your family tree from a standard GED file.',
    'page callback' => 'family_import_done',
    'access arguments' => array('administer family'),
    'type' => MENU_CALLBACK,
    );
  $items['admin/settings/family/family_privacy'] = array(
    'title' => 'Family Privacy',
    'description' => 'Protect your important family data by running this privacy script.',
    'page callback' => 'family_auto_privacy',
    'access arguments' => array('administer family'),
    'type' => MENU_LOCAL_TASK,
    );
  $items['admin/settings/family/family_privacy/family_privacy_done'] = array(
    'title' => 'Family Privacy',
    'description' => 'Protect your important family data by running this privacy script',
    'page callback' => 'family_auto_privacy_done',
    'access arguments' => array('administer family'),
    'type' => MENU_CALLBACK,
    );
  $items['node/%/tree/asc'] = array(
    'title' => 'Ascendants',
    'page callback' => 'family_view_tree_asc',
    'page arguments' => array(1),
    'access callback'   => 'family_individual_check_type',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    );
  $items['node/%/tree/desc'] = array(
    'title' => 'Descendants',
    'page callback' => 'family_view_tree_desc',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'family_individual_check_type',
    'access arguments' => array(1),
    );
   return $items;
}

function family_admin_settings() {
  $output = '<ul>';
  $output .= '<li><a href="/admin/settings/family/family_import">';
  $output .= t('Import family data');
  $output .= '</a></li>';
  $output .= '<li><a href="/admin/settings/family/family_privacy">';
  $output .= t('Family privacy');
  $output .= '</a></li>';
  $output .= '</ul>';
  return $output;
}

function family_individual_check_type($nid) {
  if (is_numeric($nid)) {
    $node = node_load($nid);
    if ($node->type == 'family_individual') {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_node_info().
 */
function family_node_info() {
  return array(
    'family_individual' => array(
      'name' => t('Family: Individual'),
      'module' => 'family_individual',
      'description' => t('An individual person.'),
      'has_title' => TRUE,
      'title_label' => t('Person'),
      'has_body' => TRUE,
      'body_label' => t('Additional information'),
    ),
    'family_group' => array(
      'name' => t('Family: Group'),
      'module' => 'family_group',
      'description' => t('A single grouping of parents and/or children.'),
      'has_title' => TRUE,
      'title_label' => t('Group'),
      'has_body' => TRUE,
      'body_label' => t('Additional information'),
    ),
    'family_location' => array(
      'name' => t('Family: Location'),
      'module' => 'family_location',
      'description' => t('A genealogically significant location.'),
      'has_title' => TRUE,
      'title_label' => t('Location'),
      'has_body' => TRUE,
      'body_label' => t('Additional information'),
    ),
  );
}

/**
 * Implementation of hook_access().
 */
function family_access($op, $node, $account) {
  global $user;

  if ($op == 'create') {
    return user_access('create family nodes');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own family nodes') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  if (user_access('edit family nodes')) {
    return TRUE;
  }
  }
  if ($op == 'view') {
  return (user_access('access family nodes'));
  }
}

/**
 * Implementation of hook_user().
 */
function family_user($type, &$edit, &$user) {

  switch ($type) {

  case ('insert'):
  case ('update'):
  case ('submit'):
  case ('login'):
  case ('logout'):
  case ('delete'):
     break;

  case ('form'):
    if ($edit['family_tree_root'] == '') {
      $edit['family_tree_root'] = $edit['family_link'];
    }
    if ($edit['family_tree_depth'] == '') {
      $edit['family_tree_depth'] = 2;
    }
  $form['family'] = array(
    '#type' => 'fieldset',
    '#title' => t('Family information'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 4,
    );
    $results = db_query("SELECT * FROM {family_individual}");
    $listoptionsalive = array();
      while ($indi = db_fetch_array($results)) {
        //$deathfacts = family_getfacts($indi['fid']);
        if (($indi['deathdate']) == '' || ($indi['deathdate']) == '0000-00-00 00:00:00') {
          $listoptionsalive[$indi['nid']] = $indi['title_format'];
        }
      }
    $results = db_query("SELECT * FROM {family_individual}");
    $listoptions = array();
      while ($indi = db_fetch_array($results)) {
        $listoptions[$indi['nid']] = $indi['title_format'];
      }

  $form['family']['family_link'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => t('None of these'),
      t('Individuals') => $listoptionsalive,
      ),
    '#title' => t('My family link'),
    '#default_value' => $edit['family_link'],
    '#description' => t('Which one of the people on the list is you?'),
    );
  $form['family']['family_tree_root'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => t('None of these'),
      t('Individuals') => $listoptions,
      ),
    '#title' => t('Family tree centered around'),
    '#default_value' => $edit['family_tree_root'],
    '#description' => t('Choose the person you want your particular family tree to be centered around.'),
    );
  $form['family']['family_tree_type'] = array(
    '#type' => 'select',
    '#options' => array(
      'asc' => 'Ancestry',
      'desc' => 'Descendency',
      ),
    '#title' => t('Type of tree'),
    '#default_value' => $edit['family_tree_type'],
    '#description' => t('Do you want your family tree based on ancestry or descendency?')
    );
  $form['family']['family_tree_depth'] = array(
    '#type' => 'select',
    '#options' => array(1, 2, 3),
    '#title' => t('Number of generations'),
    '#default_value' => $edit['family_tree_depth'],
    '#description' => t('Choose how many generations people will see by default ') .'<strong>'. t('in addition to you') .'</strong>'. t(' when they view your family profile page.'),
    );
  return $form;
  break;

  case ('view'):
    if ($user && user_access('access family nodes')) {
    $user->content['family'] = array(
      '#type' => 'user_profile_category',
      '#title' => t("Family information"),
      '#weight' => 3,
    );
    $user->content['family']['link'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t("My family link"),
      '#value' => l("Me", "node/". $user->family_link),
      '#weight' => 1,
    );
    $user->content['family']['tree'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('My family tree'),
      '#value' => l('My family tree', 'node/'. $user->family_tree_root .'/tree/'. $user->family_tree_type, array('html' => 'TRUE', 'query' => 'len='. $user->family_tree_depth)),
      '#weight' => 2,
    );
    }
  }
}

/**
 * Check if record $nid is private.
 */
function family_check_privacy($nid) {
  $privacy=db_result(db_query("SELECT privacy FROM {family_individual} WHERE nid=%d", $nid));
  if ($privacy) {
// Yyyyeeesssss????
  }
  else {
    $privacy=0;
  }
  if (($privacy==1) || ($privacy==3)) {
    return user_access('access family');
  }
  else {
    return user_access('access family private records');
  }
}
/**
 * Implementation of the token.module's hook_token_values().
 *
 * @param $type
 *   The current context -- 'node', 'user', 'global', etc.
 * @param $object
 *   The specific node, user, etc. that should be used as the basis for the
 *   replacements.
 * @return
 *   Array of tokens.
 */
function family_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'node' && $node->type == 'family_individual') {
    $node = $object;
  $tokens['family-individual-firstname'] = check_plain($node->FORE);
  $tokens['family-individual-middlename'] = check_plain($node->MIDN);
  $tokens['family-individual-lastname'] = check_plain($node->SURN);
  $tokens['family-individual-birthdate'] = check_plain($node->BIRT_DATE);
  $tokens['family-individual-birthplace'] = check_plain($node->BIRT_PLACE);
  return $tokens;
  }
  if ($type == 'node' && $node->type == 'family_group') {
    $node = $object;
  $tokens['family-group-uniontype'] = check_plain($node->MARR_TYPE);
  $tokens['family-group-unionplace'] = check_plain($node->MARR_PLAC);
  $tokens['family-group-uniondate'] = check_plain($node->MARR_DATE);
  $tokens['family-group-parent1'] = check_plain($node->PAR1);
  $tokens['family-group-parent2'] = check_plain($node->PAR2);
  return $tokens;
  }
}

/**
 * Implementation of hook_block().
 *
 * Displays siblings of a Family Individual
 */
function family_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Family: Siblings of Individual');
      return $block;

    case 'view':
      if (user_access('access family nodes')) {
        switch ($delta) {
          case 0:
            if (arg(0)=='node' && is_numeric(arg(1))) {
              $indiv = family_tree_get_info(arg(1));
              $fam = db_fetch_array(db_query("SELECT g.* FROM {family_group} g, {family_individual} i WHERE (g.nid=i.ancestor_group AND i.nid='%d')", $indiv['nid']));
              if ($fam) {
                $father = $fam['parent1'];
                $mother = $fam['parent2'];
                $items = array();
                $block['subject'] = t('Siblings');
                $families = db_query("SELECT * FROM {family_group} WHERE ((parent1='%d' AND parent1<>'') OR (parent2='%d' AND parent2<>''))", $father, $mother);
                if ($families) {
                  while ($family=db_fetch_array($families)) {
                    if ($result=db_query("SELECT * FROM {family_individual} WHERE ancestor_group=%d AND nid!=%d order by birthdate", $family['nid'], $indiv['nid'])) {
                      while ($sibling=db_fetch_array($result)) {
                        $items[] = family_make_name($sibling['nid'], TRUE) . '<br/>(b: ' . substr($sibling['birthdate'], 0, 10) . ')';
                      }
                    }
                  }
          if ($items) {
                    $block['content'] = theme_item_list($items);
          }
          else {
            $block['content'] = t('No siblings found');
          }
                }
              }
            }
            break;
        }
      }
      return $block;
  }
}
